const db = require('../config/dbConnection'); //reference of dbconnection.js
const moment = require('moment');

const NotificationTask = {
    getTableDetails: function (user_id) {
        return new Promise((resolve, reject) => {
            db.query("((select n.news_id as id,n.title as subject,'breaking-news' as type, 'NA' as status,n.uploaded_on as entry_date from news n where n.is_delete=false and n.is_hide=false and is_breaking=true order by n.uploaded_on desc) union  (select n.news_id as id,n.title as subject,'news' as type, 'NA' as status,n.uploaded_on as entry_date from news n where n.is_delete=false and n.is_hide=false and is_breaking=false order by n.uploaded_on desc) order by entry_date desc) union (select p.poll_id as id,p.poll_subject as subject,p.poll_answer as type,'NA' as status,p.submission_date as entry_date from poll p where p.poll_answer ='poll' and p.poll_status='Active' and p.poll_active_status='active' order by p.start_date desc) union (select subqueryI.countOfChild as id,(select title from incident i where i.incident_id =countOfChild) ,'incident_comment' as type,'NA' as status,i2.reported_date as entry_date from incident i2 join (select main_incident_id ,incident_id as countOfChild from incident where user_id =$1 and incident_comment='incident' and incident_active_delete='active' group by main_incident_id,incident_id order by incident_id desc) subqueryI on (i2.main_incident_id = subqueryI.countOfChild ) where i2.incident_comment ='comment' and i2.incident_active_delete='active' and i2.comment_active_delete ='active' and i2.user_id !=$1 order by i2.incident_id desc) union (select i2.incident_id ,i2.title ,'incident_status' as type ,is2.incident_status_type , i2.status_update_date as entry_date from incident i2 join incident_status is2 on is2.incident_status_id=i2.incident_status_id where i2.is_anonymous =false and i2.incident_comment='incident' and i2.incident_active_delete='active' and i2.status_update_date is not null and is2.incident_status_type!='Open' and i2.user_id=$1 order by i2.status_update_date desc) union (select i.thread_id,i.subject,i.idea_comment as type,'NA' as status,i.created_date as entry_date from ideas i where i.user_id !=$1 and i.idea_comment='idea' and i.status=1 order by i.created_date desc) union(select subqueryI.countOfChild as id,(select subject from ideas i3 where i3.thread_id =countOfChild),'idea_comment' as type,'NA' as status,i4.created_date as entry_date from ideas i4 join (select i5.main_thread_id ,i5.thread_id as countOfChild from ideas i5 where i5.user_id =$1 and i5.idea_comment='idea' group by i5.main_thread_id,i5.thread_id order by i5.thread_id desc) subqueryI on (i4.main_thread_id = subqueryI.countOfChild ) where i4.idea_comment ='comment' and i4.status=1 and i4.user_id !=$1 order by i4.thread_id desc) union (select v.volunteer_id,v.title,v.volunteer_comment as type,'NA' as status,v.registration_date as entry_date from volunteers v where v.user_id !=$1 and v.volunteer_account ='active' and v.volunteer_comment='volunteer' order by v.registration_date desc) union (select subqueryI.countOfChild as id,(select title as subject from volunteers v2 where v2.volunteer_id=countOfChild) ,'volunteer_comment' as type,'NA' as status,v.registration_date as entry_date from volunteers v join (select main_volunteer_id ,volunteer_id as countOfChild from volunteers where user_id =$1 and volunteer_comment='volunteer' group by main_volunteer_id,volunteer_id order by volunteer_id desc) subqueryI on (v.main_volunteer_id = subqueryI.countOfChild ) where v.volunteer_comment ='comment' and v.volunteer_account='active' and user_id !=$1 order by v.volunteer_id desc) union(select subqueryI.countOfChild as id,(select subject from complaints c where c.thread_id =countOfChild),'complaint_comment' as type,'NA' as status,c2.submission_date as entry_date from complaints c2 join (select main_thread_id ,thread_id as countOfChild from complaints c3 where user_id =$1 and complaint_comment='complaint' and c3.active_delete='active' group by main_thread_id,thread_id order by thread_id desc) subqueryI on (c2.main_thread_id = subqueryI.countOfChild ) where c2.complaint_comment ='comment' and c2.active_delete='active' and c2.user_id !=1186 order by c2.thread_id desc) union (select c.thread_id as id,c.subject as subject,'complaint_status' as type ,cs.status_name as type ,c.complaint_status_date as entry_date from complaints c join complaint_status cs on c.complaint_status_id =cs.complaint_status_id where c.active_delete ='active' and c.complaint_comment='complaint' and c.complaint_status_date is not null and c.user_id=$1 and cs.status_name !='Open' order by c.complaint_status_date desc) order by entry_date desc limit 5", [user_id],  (error, results) => {
                if (error) return reject(error);
                return resolve(results);
            });
        });
    },

    getCommentDetails: function (user_id) {
        return new Promise((resolve, reject) => {
            db.query("(select (select title as subject from volunteers v2 where v2.volunteer_id=countOfChild) ,v.volunteer_comment as type from volunteers v join (select volunteer_id ,main_volunteer_id as countOfChild from volunteers where user_id !=$1 and volunteer_comment='comment' group by main_volunteer_id,volunteer_id order by volunteer_id desc limit 1)  subqueryI  on (v.main_volunteer_id = subqueryI.countOfChild ) where v.volunteer_comment ='comment' and v.volunteer_account='active' and user_id !=$1 order by v.volunteer_id desc limit 1) union (select (select title from incident i where i.incident_id =countOfChild) ,i2.incident_comment  from incident i2 join (select incident_id ,main_incident_id as countOfChild from incident  where user_id !=$1 and incident_comment='comment' group by main_incident_id,incident_id order by incident_id desc limit 1)  subqueryI  on (i2.main_incident_id = subqueryI.countOfChild ) where i2.incident_comment ='comment' and i2.incident_active_delete='active' and i2.user_id !=$1 order by i2.incident_id desc limit 1) union (select (select subject from complaints c  where c.thread_id =countOfChild) ,c2.complaint_comment  from complaints c2 join (select thread_id ,main_thread_id as countOfChild from complaints c3  where user_id !=$1 and complaint_comment='comment' group by main_thread_id,thread_id order by thread_id desc limit 1)  subqueryI  on (c2.main_thread_id = subqueryI.countOfChild ) where c2.complaint_comment ='comment' and c2.active_delete='active' and c2.user_id !=$1 order by c2.thread_id desc limit 1) union (select (select subject from ideas i3 where i3.thread_id =countOfChild) ,i4.idea_comment  from ideas i4  join (select thread_id ,main_thread_id as countOfChild from ideas i5  where user_id !=$1 and idea_comment='comment' group by main_thread_id,thread_id order by thread_id desc limit 1)  subqueryI  on (i4.main_thread_id = subqueryI.countOfChild ) where i4.idea_comment ='comment' and i4.status=1 and i4.user_id !=$1 order by i4.thread_id desc limit 1)", [user_id],  (error, results) => {
                if (error) return reject(error);
                return resolve(results);
            });
        });
    },
};

module.exports = NotificationTask;